{
    "bounties": [
        {
            "bounty_id": "bounty_dos_port",
            "title": "MS-DOS Validator Port",
            "description": "Create a RustChain validator client that runs on real-mode DOS (FreeDOS/PC-DOS/MS-DOS). Must read BIOS date and generate entropy.",
            "reward": "Uber Dev Badge + RUST 500",
            "status": "Open",
            "requirements": [
                "Compatible with MS-DOS 6.x+",
                "Outputs proof_of_antiquity.json to FAT filesystem",
                "Entropy simulation via loop delay"
            ]
        },
        {
            "bounty_id": "bounty_macos_75",
            "title": "Classic Mac OS 7.5.x Validator",
            "description": "Build a validator utility that runs under System 7.5 using Toolbox or THINK C. Must parse system clock and Finder files.",
            "reward": "Uber Dev Badge + RUST 750",
            "status": "Open",
            "requirements": [
                "Runs under Mac OS 7.5\u20139.1",
                "Captures System Folder timestamp",
                "Reports CPU type and writes reward log"
            ]
        },
        {
            "bounty_id": "bounty_win31_progman",
            "title": "Win3.1 Progman Validator",
            "description": "Write a validator that runs under Windows 3.1 with a Program Manager interface. Must perform entropy and display scores.",
            "reward": "Uber Dev Badge + RUST 600",
            "status": "Open",
            "requirements": [
                "Executable as 16-bit Win app",
                "Graphical score screen",
                "Can write proof_of_antiquity.json"
            ]
        },
        {
            "bounty_id": "bounty_beos_tracker",
            "title": "BeOS / Haiku Native Validator",
            "description": "Build a native BeOS or Haiku application that runs validator logic and outputs rewards.",
            "reward": "Uber Dev Badge + RUST 400",
            "status": "Open",
            "requirements": [
                "Compatible with BeOS R5 or Haiku",
                "C++ Tracker-based GUI",
                "Can detect hardware and entropy"
            ]
        },
        {
            "bounty_id": "bounty_web_explorer",
            "title": "RustChain Web Explorer \u2013 Keeper Faucet Edition",
            "description": "Develop a web-based blockchain explorer for RustChain. Must display blocks, validator info, NFT badge unlocks, and include a faucet interface to reward Keepers.",
            "reward": "Uber Dev Badge + RUST 1000",
            "status": "Open",
            "requirements": [
                "Explorer must display block data and validator scores",
                "Real-time or scheduled refresh via node RPC or JSON file",
                "Faucet claim form for validated Keepers (proof_of_antiquity.json required)",
                "UI must reflect retro/fossil-punk theme (DOS, CRT, or pixel-style aesthetic)",
                "Mobile-friendly optional but preferred"
            ]
        },
        {
            "bounty_id": "bounty_relic_lore_scribe",
            "title": "Relic Lore Scribe",
            "description": "Contribute original lore entries and emotional resonance narratives for legacy hardware, badges, or validators within the RustChain ecosystem. Help shape the voice of the chain.",
            "reward": "Flamekeeper Lore Badge + RUST 350",
            "status": "Open",
            "requirements": [
                "Write original lore for at least 5 existing or proposed relic badges",
                "Lore must include emotional resonance, symbolic metaphors, and historical callbacks",
                "Submissions accepted via GitHub Pull Request into the lore directory",
                "Creative writing experience preferred; bonus for retro computing knowledge"
            ]
        }
    ]
}